import { defineStore } from 'pinia'
import { ref } from 'vue'
import type { Course, Lesson, LessonDetail } from '@/types/api'
import { courseService } from '@/services/courseService'
import { lessonService } from '@/services/lessonService'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
interface CourseProgress {
  completed_lessons: number
  total_lessons: number
  progress_percent: number
}

export const useCourseDetailStore = defineStore('courseDetail', () => {
  const course = ref<Course | null>(null)
  const lessons = ref<Lesson[]>([])
  const currentLesson = ref<LessonDetail | null>(null)
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  const progress = ref<CourseProgress>({
    completed_lessons: 0,
    total_lessons: 0,
    progress_percent: 0,
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞ –∏ —É—Ä–æ–∫–æ–≤
  const fetchCourseDetail = async (courseId: number) => {
    isLoading.value = true
    error.value = null

    try {
      console.log(`üîÑ Loading course details for ID: ${courseId}`)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å –∏ —É—Ä–æ–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [courseData, lessonsResponse] = await Promise.all([
        courseService.getCourse(courseId),
        lessonService.getCourseLessons(courseId),
      ])

      course.value = courseData

      // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏–∑–≤–ª–µ–∫–∞–µ–º lessons –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const lessonsData = lessonsResponse.lessons || []
      lessons.value = lessonsData

      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      updateProgress(lessonsData)

      console.log(`‚úÖ Course details loaded:`, {
        course: courseData?.title,
        lessons: lessonsData.length,
        progress: progress.value.progress_percent,
      })
    } catch (err: any) {
      error.value = err.response?.data?.detail || `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ ${courseId}`
      console.error(`‚ùå Error loading course ${courseId}:`, err)
    } finally {
      isLoading.value = false
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
  const fetchLessonDetail = async (lessonId: number) => {
    isLoading.value = true
    error.value = null

    try {
      const lessonData = await lessonService.getLessonDetail(lessonId)
      currentLesson.value = lessonData

      console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞, is_completed:', lessonData.is_completed)
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞'
      console.error('‚ùå Error loading lesson detail:', err)
    } finally {
      isLoading.value = false
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
  const markLessonCompleted = async (lessonId: number) => {
    try {
      await lessonService.completeLesson(lessonId)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      const lessonIndex = lessons.value.findIndex((l) => l.id === lessonId)
      if (lessonIndex !== -1) {
        lessons.value[lessonIndex].completed = true
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
      if (currentLesson.value && currentLesson.value.id === lessonId) {
        currentLesson.value = {
          ...currentLesson.value,
          is_completed: true,
        }
      }

      updateProgress(lessons.value)
    } catch (err) {
      console.error('Error marking lesson completed:', err)
      throw err
    }
  }

  const markLessonIncomplete = async (lessonId: number) => {
    try {
      await lessonService.uncompleteLesson(lessonId)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      const lessonIndex = lessons.value.findIndex((l) => l.id === lessonId)
      if (lessonIndex !== -1) {
        lessons.value[lessonIndex].completed = false
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
      if (currentLesson.value && currentLesson.value.id === lessonId) {
        currentLesson.value = {
          ...currentLesson.value,
          is_completed: false,
        }
      }

      updateProgress(lessons.value)
    } catch (err) {
      console.error('Error marking lesson incomplete:', err)
      throw err
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const updateProgress = (lessonsData: Lesson[]) => {
    const completedLessons = lessonsData.filter((lesson) => lesson.completed).length
    const totalLessons = lessonsData.length

    progress.value = {
      completed_lessons: completedLessons,
      total_lessons: totalLessons,
      progress_percent: totalLessons ? Math.round((completedLessons / totalLessons) * 100) : 0,
    }
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const reset = () => {
    course.value = null
    lessons.value = []
    currentLesson.value = null
    progress.value = {
      completed_lessons: 0,
      total_lessons: 0,
      progress_percent: 0,
    }
    error.value = null
  }
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const refreshCourseProgress = async (courseId: number) => {
    try {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞')

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const lessonsResponse = await lessonService.getCourseLessons(courseId)
      const lessonsData = lessonsResponse.lessons || []

      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
      lessons.value = lessonsData
      updateProgress(lessonsData)

      console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
        lessons: lessonsData.length,
        completed: progress.value.completed_lessons,
        progress: progress.value.progress_percent + '%',
      })
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞:', err)
    }
  }
  return {
    course,
    lessons,
    currentLesson,
    progress,
    isLoading,
    error,
    fetchCourseDetail,
    fetchLessonDetail,
    markLessonCompleted,
    markLessonIncomplete,
    refreshCourseProgress,
    reset,
  }
})
