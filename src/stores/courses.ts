import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import type { Course } from '@/types/api';
import { courseService } from '@/services/courseService';

export const useCoursesStore = defineStore('courses', () => {
  const courses = ref<Course[]>([]);
  const isLoading = ref(false);
  const error = ref<string | null>(null);
  const lastFetchTime = ref<number>(0);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ —Å API
  const fetchUserCourses = async (force = false) => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    const now = Date.now();
    if (!force && isLoading.value) {
      console.log('‚è© Skip loading - already loading');
      return;
    }
    
    if (!force && now - lastFetchTime.value < 5000 && courses.value.length > 0) {
      console.log('‚è© Skip loading - data is fresh');
      return;
    }

    isLoading.value = true;
    error.value = null;
    
    try {
      console.log('üîÑ Fetching courses from API...');
      courses.value = await courseService.getCourses();
      lastFetchTime.value = now;
      console.log('‚úÖ Courses loaded:', courses.value.length);
    } catch (err: any) {
      error.value = err.response?.data?.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã';
      console.error('‚ùå Error loading courses:', err);
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (err.response?.status === 404 || err.response?.status === 500) {
        console.log('üìã Using mock data as fallback');
        courses.value = getMockCourses();
        error.value = null;
      }
    } finally {
      isLoading.value = false;
    }
  };

  // –ó–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
  const getMockCourses = (): Course[] => {
    return [
      {
        id: 1,
        title: '–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –º–∞–Ω–∏–∫—é—Ä–∞',
        description: '–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏',
        access_level: 'BASIC',
        course_type: 'VIDEO',
        lesson_count: 12,
        cover_image: '/images/course1.jpg'
      },
      {
        id: 2,
        title: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π',
        description: '–°–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –¥–∏–∑–∞–π–Ω—ã',
        access_level: 'ADVANCED', 
        course_type: 'VIDEO',
        lesson_count: 8,
        cover_image: '/images/course2.jpg'
      }
    ] as Course[];
  };

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const activeCoursesCount = computed(() => courses.value.length);
  
  const completedLessonsCount = computed(() => {
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
    return Math.floor(courses.value.length * 5);
  });

  return {
    courses,
    isLoading,
    error,
    activeCoursesCount,
    completedLessonsCount,
    fetchUserCourses
  };
});