import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import apiClient from '@/api/client'
import type { Homework } from '@/types/api'

export interface Notification {
  id: number
  type: 'HOMEWORK_SUBMITTED' | 'HOMEWORK_STATUS_CHANGED' | string
  title: string
  message: string
  homework_id: number | null
  lesson_title: string
  read: boolean
  created_at: string
}

export const useNotificationStore = defineStore('notification', () => {
  const notifications = ref<Notification[]>([])
  const isLoading = ref(false)
  const lastCheck = ref<Date | null>(null)

  // –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const unreadNotifications = computed(() =>
    notifications.value.filter((notification) => !notification.read),
  )

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const unreadCount = computed(() => unreadNotifications.value.length)

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
  const homeworkNotifications = computed(() =>
    notifications.value.filter((n) => n.homework_id !== null),
  )

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchNotifications = async (force = false) => {
    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º, –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (isLoading.value && !force) return

    isLoading.value = true
    try {
      console.log('üîî –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞...')
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api/
      const response = await apiClient.get('/notifications/')

      notifications.value = response.data.notifications
      lastCheck.value = new Date()

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${notifications.value.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)
      return notifications.value
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
      console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data)
      throw error
    } finally {
      isLoading.value = false
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = async (notificationId: number) => {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api/
      await apiClient.post('/notifications/', { notification_id: notificationId })

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const notification = notifications.value.find((n) => n.id === notificationId)
      if (notification) {
        notification.read = true
      }

      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`)
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error)
      console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data)
      throw error
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAllAsRead = async () => {
    try {
      const unreadIds = unreadNotifications.value.map((n) => n.id)

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      for (const id of unreadIds) {
        await markAsRead(id)
      }

      console.log(`‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${unreadIds.length}) –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
      throw error
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const clearReadNotifications = async () => {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /api/
      await apiClient.delete('/notifications/')

      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      notifications.value = notifications.value.filter((n) => !n.read)

      console.log('‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã')
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
      console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data)
      throw error
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)
  const clearAllLocal = () => {
    notifications.value = []
    console.log('üóëÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ')
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
  const checkForNewNotifications = async (): Promise<boolean> => {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')

      const oldCount = unreadCount.value
      await fetchNotifications(true)
      const newCount = unreadCount.value

      const hasNew = newCount > oldCount
      if (hasNew) {
        console.log(`üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newCount - oldCount} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)
      }

      return hasNew
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
      return false
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ
  const getHomeworkNotifications = (homeworkId: number) => {
    return notifications.value.filter((n) => n.homework_id === homeworkId)
  }

  // –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è real-time, –µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å WebSockets)
  const addNotificationLocal = (notification: Notification) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const exists = notifications.value.some((n) => n.id === notification.id)
    if (!exists) {
      notifications.value.unshift(notification)

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      if (notifications.value.length > 50) {
        notifications.value = notifications.value.slice(0, 50)
      }

      console.log('üì® –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ')
    }
  }

  return {
    // State
    notifications,
    isLoading,
    lastCheck,

    // Getters
    unreadNotifications,
    unreadCount,
    homeworkNotifications,

    // Actions
    fetchNotifications,
    markAsRead,
    markAllAsRead,
    clearReadNotifications,
    clearAllLocal,
    checkForNewNotifications,
    getHomeworkNotifications,
    addNotificationLocal,
  }
})
