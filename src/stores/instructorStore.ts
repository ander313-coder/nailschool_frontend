import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { instructorService } from '@/services/instructorService'
import type {
  Homework,
  HomeworkReviewData,
  TextAnswer,
  TextAnswerReviewData,
  HomeworkFilters,
} from '@/types/api'

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
 */
export const useInstructorStore = defineStore('instructor', () => {
  const pendingHomeworks = ref<Homework[]>([])
  const allHomeworks = ref<Homework[]>([])
  const pendingTextAnswers = ref<TextAnswer[]>([])
  const allTextAnswers = ref<TextAnswer[]>([])
  const studentTextAnswers = ref<TextAnswer[]>([])
  const isLoading = ref(false)
  const error = ref<string | null>(null)

  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É */
  const pendingHomeworksCount = computed(() => pendingHomeworks.value.length)

  /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É */
  const pendingTextAnswersCount = computed(() => pendingTextAnswers.value.length)

  /** –î–ó —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É */
  const homeworksByStatus = computed(() => {
    const grouped = {
      PENDING: [] as Homework[],
      APPROVED: [] as Homework[],
      REJECTED: [] as Homework[],
    }

    allHomeworks.value.forEach((homework) => {
      if (homework.status in grouped) {
        grouped[homework.status as keyof typeof grouped].push(homework)
      }
    })

    return grouped
  })

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
   */
  const loadPendingHomeworks = async (): Promise<void> => {
    try {
      isLoading.value = true
      error.value = null
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É...')

      const homeworks = await instructorService.getPendingHomeworks()
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤
      pendingHomeworks.value = Array.isArray(homeworks) ? homeworks : []

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${pendingHomeworks.value.length} –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É`)
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –î–ó (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
   */
  const loadAllHomeworks = async (filters?: HomeworkFilters): Promise<void> => {
    try {
      isLoading.value = true
      error.value = null
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –î–ó...')

      const homeworks = await instructorService.getAllHomeworks(filters)
      allHomeworks.value = Array.isArray(homeworks) ? homeworks : []

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allHomeworks.value.length} –î–ó`)
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –î–ó'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –î–ó:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }
  /** –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
   */
  const loadPendingTextAnswers = async (): Promise<void> => {
    try {
      isLoading.value = true
      error.value = null
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É...')

      const answers = await instructorService.getPendingTextAnswers()
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤
      pendingTextAnswers.value = Array.isArray(answers) ? answers : []

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${pendingTextAnswers.value.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤`)
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
  const loadAllTextAnswers = async (filters?: { user_id?: number }): Promise<void> => {
    try {
      isLoading.value = true
      error.value = null
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã...')

      const answers = await instructorService.getAllTextAnswers(filters)
      allTextAnswers.value = Array.isArray(answers) ? answers : []

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allTextAnswers.value.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤`)
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const loadStudentTextAnswers = async (userId: number): Promise<void> => {
    try {
      isLoading.value = true
      error.value = null
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ ${userId}...`)

      const answers = await instructorService.getStudentTextAnswers(userId)
      studentTextAnswers.value = Array.isArray(answers) ? answers : []

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${studentTextAnswers.value.length} –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞`)
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
   */
  const reviewHomework = async (
    homeworkId: number,
    reviewData: HomeworkReviewData,
  ): Promise<void> => {
    try {
      isLoading.value = true
      error.value = null
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –î–ó ${homeworkId}...`)

      const updatedHomework = await instructorService.reviewHomework(homeworkId, reviewData)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
      const allIndex = allHomeworks.value.findIndex((hw) => hw.id === homeworkId)
      if (allIndex !== -1) {
        allHomeworks.value[allIndex] = updatedHomework
      }

      // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (—Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ç—É—Å –±–æ–ª—å—à–µ –Ω–µ PENDING)
      const pendingIndex = pendingHomeworks.value.findIndex((hw) => hw.id === homeworkId)
      if (pendingIndex !== -1) {
        pendingHomeworks.value.splice(pendingIndex, 1)
        console.log(`üìã –î–ó ${homeworkId} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É`)
      }

      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å APPROVED, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (reviewData.status === 'APPROVED') {
        console.log(`üéâ –î–ó ${homeworkId} –ø—Ä–∏–Ω—è—Ç–æ!`)
      } else if (reviewData.status === 'REJECTED') {
        console.log(`‚ö†Ô∏è –î–ó ${homeworkId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É`)
      }
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –î–ó'
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–ó:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
   */
  const reviewTextAnswer = async (
    answerId: number,
    reviewData: TextAnswerReviewData,
  ): Promise<void> => {
    try {
      isLoading.value = true
      error.value = null
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç ${answerId}...`)

      const updatedAnswer = await instructorService.reviewTextAnswer(answerId, reviewData)

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö
      updateAnswerInLists(answerId, updatedAnswer)

      console.log(`‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç ${answerId} –ø—Ä–æ–≤–µ—Ä–µ–Ω`)
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö
   */
  const updateAnswerInLists = (answerId: number, updatedAnswer: any): void => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ pendingTextAnswers
    const pendingIndex = pendingTextAnswers.value.findIndex((answer) => answer.id === answerId)
    if (pendingIndex !== -1) {
      pendingTextAnswers.value.splice(pendingIndex, 1)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ allTextAnswers
    const allIndex = allTextAnswers.value.findIndex((answer) => answer.id === answerId)
    if (allIndex !== -1) {
      allTextAnswers.value[allIndex] = { ...allTextAnswers.value[allIndex], ...updatedAnswer }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ studentTextAnswers
    const studentIndex = studentTextAnswers.value.findIndex((answer) => answer.id === answerId)
    if (studentIndex !== -1) {
      studentTextAnswers.value[studentIndex] = {
        ...studentTextAnswers.value[studentIndex],
        ...updatedAnswer,
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
   */
  const clearError = (): void => {
    error.value = null
  }

  return {
    // State
    pendingHomeworks,
    allHomeworks,
    pendingTextAnswers,
    isLoading,
    error,
    allTextAnswers,
    studentTextAnswers,

    // Getters
    pendingHomeworksCount,
    pendingTextAnswersCount,
    homeworksByStatus,

    // Actions
    loadPendingHomeworks,
    loadAllHomeworks,
    loadPendingTextAnswers,
    reviewHomework,
    reviewTextAnswer,
    clearError,
    loadStudentTextAnswers,
    loadAllTextAnswers,
  }
})
