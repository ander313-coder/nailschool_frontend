import { defineStore } from 'pinia'
import { ref } from 'vue'
import { homeworkService } from '@/services/homeworkService'
import type { Homework, HomeworkFilters, HomeworkSubmission } from '@/types/api'
import apiClient from '@/api/client'

export const useHomeworkStore = defineStore('homework', () => {
  const currentHomework = ref<Homework | null>(null)
  const homeworkList = ref<Homework[]>([])
  const isLoading = ref(false)
  const error = ref<string | null>(null)

  // –ü–æ–ª—É—á–∏—Ç—å –î–ó –¥–ª—è —É—Ä–æ–∫–∞
  const fetchHomeworkForLesson = async (lessonId: number) => {
    isLoading.value = true
    error.value = null

    try {
      currentHomework.value = await homeworkService.getHomeworkForLesson(lessonId)
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
      console.error('Error fetching homework:', err)
    } finally {
      isLoading.value = false
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó
  const submitHomework = async (submission: HomeworkSubmission): Promise<Homework> => {
    isLoading.value = true
    error.value = null

    try {
      const homework = await homeworkService.submitHomework(submission)
      currentHomework.value = homework
      return homework
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
      console.error('Error submitting homework:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }
  const createOrUpdateHomework = async (submission: HomeworkSubmission): Promise<Homework> => {
    isLoading.value = true
    error.value = null

    try {
      const homework = await homeworkService.createOrUpdateHomework(submission)
      currentHomework.value = homework
      return homework
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
      console.error('Error creating/updating homework:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }

  const fetchUserHomeworks = async (filters?: HomeworkFilters) => {
    isLoading.value = true
    error.value = null

    try {
      console.log('üì§ –ó–∞–ø—Ä–æ—Å –î–ó —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters)

      const response = await apiClient.get('/homework/', {
        params: filters,
      })

      // –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –û–ë–ù–û–í–õ–ï–ù–ò–Æ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
      homeworkList.value = response.data.sort(
        (a: { updated_at: string | number | Date }, b: { updated_at: string | number | Date }) =>
          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime(),
      )

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –î–ó:', homeworkList.value.length, '(–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ updated_at)')
      return homeworkList.value
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –î–ó:', err)
      console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', err.response?.data)
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π'
      throw err
    } finally {
      isLoading.value = false
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –ø–æ ID (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
  const fetchHomeworkById = async (homeworkId: number) => {
    isLoading.value = true
    error.value = null

    try {
      const response = await apiClient.get(`/homework/${homeworkId}/`)
      console.log('üìÅ Homework by ID response:', response.data) // –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      console.log('üìÅ Files in response:', response.data.files) // –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      return response.data
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
      console.error('Error fetching homework by id:', err)
      throw err
    } finally {
      isLoading.value = false
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
  const checkStatusChanges = async (): Promise<Homework[]> => {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤...')

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –î–ó
      const currentHomeworks = [...homeworkList.value]

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      let updatedHomeworks: Homework[] = []
      try {
        updatedHomeworks = await fetchUserHomeworks()
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –î–ó –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error)
        return []
      }

      // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
      const changedHomeworks = updatedHomeworks.filter((updated) => {
        const current = currentHomeworks.find((h) => h.id === updated.id)
        return current && current.status !== updated.status
      })

      console.log('üîÑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –î–ó:', changedHomeworks.length)
      return changedHomeworks
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤:', err)
      return []
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –≤ —Å–ø–∏—Å–∫–µ
  const updateHomeworkInList = (updatedHomework: Homework) => {
    const index = homeworkList.value.findIndex((h) => h.id === updatedHomework.id)
    if (index !== -1) {
      homeworkList.value[index] = updatedHomework
    }
  }

  const reset = () => {
    currentHomework.value = null
    homeworkList.value = []
    error.value = null
  }

  return {
    currentHomework,
    homeworkList,
    isLoading,
    error,
    fetchHomeworkForLesson,
    submitHomework,
    createOrUpdateHomework,
    fetchUserHomeworks,
    fetchHomeworkById,
    checkStatusChanges,
    updateHomeworkInList,
    reset,
  }
})
