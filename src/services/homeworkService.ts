import apiClient from '@/api/client'
import type { Homework, HomeworkSubmission } from '@/types/api'

export const homeworkService = {
  // –ü–æ–ª—É—á–∏—Ç—å –î–ó –¥–ª—è —É—Ä–æ–∫–∞
  async getHomeworkForLesson(lessonId: number): Promise<Homework | null> {
    try {
      const response = await apiClient.get(`/homework/lesson/${lessonId}/`)
      return response.data || null
    } catch (error) {
      console.error(`Error fetching homework for lesson ${lessonId}:`, error)
      return null
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ï –î–ó
  async submitHomework(submission: HomeworkSubmission): Promise<Homework> {
    const formData = new FormData()

    formData.append('lesson', submission.lesson_id.toString())
    formData.append('comment', submission.comment)

    submission.files.forEach((file) => {
      formData.append(`files`, file)
    })

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ù–û–í–û–ì–û –î–ó —Å —Ñ–∞–π–ª–∞–º–∏:', submission.files.length)

    const response = await apiClient.post('/homework/', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    })
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –ù–û–í–û–ï –î–ó:', response.data)
    return response.data
  },

  // –û–ë–ù–û–í–ò–¢–¨ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –î–ó (–¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏)
  // –í –º–µ—Ç–æ–¥–µ updateHomework
  async updateHomework(homeworkId: number, submission: HomeworkSubmission): Promise<Homework> {
    const formData = new FormData()

    formData.append('comment', submission.comment)

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    submission.files.forEach((file) => {
      formData.append(`new_files`, file) // –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ - new_files
    })

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –î–ó:', homeworkId)
    console.log('üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', submission.comment)
    console.log('üìÅ –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:', submission.files.length)
    console.log('üì¶ FormData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:')

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ FormData
    for (let pair of formData.entries()) {
      console.log('  ', pair[0], pair[1])
    }

    try {
      const response = await apiClient.patch(`/homework/${homeworkId}/`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      })
      console.log('‚úÖ –î–ó –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', response.data)
      return response.data
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–ó:', error)
      console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data)
      throw error
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –î–ó
  async addFilesToHomework(homeworkId: number, files: File[]): Promise<Homework> {
    const formData = new FormData()

    files.forEach((file) => {
      formData.append(`files`, file)
    })

    const response = await apiClient.patch(`/homework/${homeworkId}/add_files/`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    })

    return response.data
  },

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –î–ó (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
  async createOrUpdateHomework(submission: HomeworkSubmission): Promise<Homework> {
    try {
      // 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –î–ó –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
      const existingHomework = await this.getHomeworkForLesson(submission.lesson_id)

      if (existingHomework && existingHomework.id) {
        console.log('üîÑ –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –î–ó, –æ–±–Ω–æ–≤–ª—è–µ–º:', existingHomework.id)
        console.log('üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –î–ó:', existingHomework.status)

        // 2. –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –î–ó - –û–ë–ù–û–í–õ–Ø–ï–ú –µ–≥–æ
        return await this.updateHomework(existingHomework.id, submission)
      } else {
        // 3. –ï—Å–ª–∏ –î–ó –Ω–µ—Ç - –°–û–ó–î–ê–ï–ú –Ω–æ–≤–æ–µ
        console.log('üÜï –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –î–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ')
        return await this.submitHomework(submission)
      }
    } catch (error) {
      console.error('Error in createOrUpdateHomework:', error)
      throw error
    }
  },
}
